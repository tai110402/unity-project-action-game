//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""MovementManagement"",
            ""id"": ""b61e54eb-ac88-4b63-9169-43928f46d202"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""12283425-751f-4434-8740-3cf137307f21"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8c9f85ba-3f3f-42e5-8a7e-a8ac5c0950a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""07c311a5-e6ec-46b6-826d-d2fb62286871"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveOnGrapple"",
                    ""type"": ""Value"",
                    ""id"": ""d2ffac68-c167-450d-b295-10a6d416ecc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""3c741a48-902c-429b-a988-edfe716fb930"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""6d0fae90-e7c1-4fd9-98f2-bdcd0c7fde59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04ab4bc9-9a60-48bf-9d53-7102560ecd5a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""43730cde-dec9-4739-b936-45ae264e5a1e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ca2028a-3c62-4dfc-ba77-26988bd52c8f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""df9172b0-fa66-4abf-82a0-70b46dc5cdb2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c13a233-d64a-4a3d-b79e-25fab24ffbe2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0f5b7233-7dc0-4dc2-aaa4-66a45d89c4be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b7751ada-6689-4300-b4f8-5f3fdbb2b257"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""36f8b1ef-2644-4bdb-91f2-84763952b4f4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""04841228-52b6-47da-8b2e-8d082c2fbe29"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""50afae95-be1b-48c8-9e69-d83d13111ef6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0c68395a-6275-4ba1-8c8f-8bdd3305ed96"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b8fa7f5c-d933-47e9-a042-00f4625d2115"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d3c4874-7dc7-4198-beb1-ffdeb077c207"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""036b4d9a-e426-4808-8fa9-f2edde897679"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e53702b-f138-4d38-a978-dbe6c6f42145"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""739a0197-f55b-4aad-b836-6f97d15573af"",
            ""actions"": [
                {
                    ""name"": ""Guide"",
                    ""type"": ""Button"",
                    ""id"": ""140f32cb-ff9e-45c2-855c-9055eee021d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd51a89c-f392-481f-b163-89d9e44d57f7"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Guide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AttackManagement"",
            ""id"": ""95864ddd-ab5d-46fb-ba8c-cac6d78394a7"",
            ""actions"": [
                {
                    ""name"": ""NormalSkill"",
                    ""type"": ""Button"",
                    ""id"": ""ea50163e-4235-40d0-8610-acdfad65bf67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BlockSkill"",
                    ""type"": ""Button"",
                    ""id"": ""23770bc5-9f50-4c73-a896-f221501892fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstSkill"",
                    ""type"": ""Button"",
                    ""id"": ""6c2240c9-df13-4ee5-9d7d-5b7abf3ad27e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondSkill"",
                    ""type"": ""Button"",
                    ""id"": ""a7b0f771-4a45-4741-bba5-12335b96e5df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThirdSkill"",
                    ""type"": ""Button"",
                    ""id"": ""63937b12-f1ae-4161-b8de-02754de7e078"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Unequip"",
                    ""type"": ""Button"",
                    ""id"": ""f335e25b-6430-479b-bb0d-67563c9be68e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EquipAxe"",
                    ""type"": ""Button"",
                    ""id"": ""facfc36b-3ab3-4e65-bc3c-e7c12055c09f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EquipSword"",
                    ""type"": ""Button"",
                    ""id"": ""a984356c-e5f7-41bc-83dc-d739fc01639b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""abb42d4c-d603-4602-a8ab-f197eae26c55"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9af4df9a-3abc-4d2e-bde4-ca2c64c5b2fa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlockSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14a62cfc-4502-43a5-a43e-39e4e23107e8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e211bf44-2d54-4856-9f8c-dcc86a7f6e12"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55234083-28a5-47f6-a50f-6e0f11fc6a02"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThirdSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2964f633-17c5-4630-9c77-288bf4367544"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Unequip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""959de104-07f5-41cf-949c-0bad13366f12"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EquipAxe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f44da037-3511-42c7-af55-cfc4ae0811b8"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EquipSword"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementManagement
        m_MovementManagement = asset.FindActionMap("MovementManagement", throwIfNotFound: true);
        m_MovementManagement_Movement = m_MovementManagement.FindAction("Movement", throwIfNotFound: true);
        m_MovementManagement_Jump = m_MovementManagement.FindAction("Jump", throwIfNotFound: true);
        m_MovementManagement_Run = m_MovementManagement.FindAction("Run", throwIfNotFound: true);
        m_MovementManagement_MoveOnGrapple = m_MovementManagement.FindAction("MoveOnGrapple", throwIfNotFound: true);
        m_MovementManagement_Grapple = m_MovementManagement.FindAction("Grapple", throwIfNotFound: true);
        m_MovementManagement_Dash = m_MovementManagement.FindAction("Dash", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Guide = m_UI.FindAction("Guide", throwIfNotFound: true);
        // AttackManagement
        m_AttackManagement = asset.FindActionMap("AttackManagement", throwIfNotFound: true);
        m_AttackManagement_NormalSkill = m_AttackManagement.FindAction("NormalSkill", throwIfNotFound: true);
        m_AttackManagement_BlockSkill = m_AttackManagement.FindAction("BlockSkill", throwIfNotFound: true);
        m_AttackManagement_FirstSkill = m_AttackManagement.FindAction("FirstSkill", throwIfNotFound: true);
        m_AttackManagement_SecondSkill = m_AttackManagement.FindAction("SecondSkill", throwIfNotFound: true);
        m_AttackManagement_ThirdSkill = m_AttackManagement.FindAction("ThirdSkill", throwIfNotFound: true);
        m_AttackManagement_Unequip = m_AttackManagement.FindAction("Unequip", throwIfNotFound: true);
        m_AttackManagement_EquipAxe = m_AttackManagement.FindAction("EquipAxe", throwIfNotFound: true);
        m_AttackManagement_EquipSword = m_AttackManagement.FindAction("EquipSword", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementManagement
    private readonly InputActionMap m_MovementManagement;
    private List<IMovementManagementActions> m_MovementManagementActionsCallbackInterfaces = new List<IMovementManagementActions>();
    private readonly InputAction m_MovementManagement_Movement;
    private readonly InputAction m_MovementManagement_Jump;
    private readonly InputAction m_MovementManagement_Run;
    private readonly InputAction m_MovementManagement_MoveOnGrapple;
    private readonly InputAction m_MovementManagement_Grapple;
    private readonly InputAction m_MovementManagement_Dash;
    public struct MovementManagementActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementManagementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MovementManagement_Movement;
        public InputAction @Jump => m_Wrapper.m_MovementManagement_Jump;
        public InputAction @Run => m_Wrapper.m_MovementManagement_Run;
        public InputAction @MoveOnGrapple => m_Wrapper.m_MovementManagement_MoveOnGrapple;
        public InputAction @Grapple => m_Wrapper.m_MovementManagement_Grapple;
        public InputAction @Dash => m_Wrapper.m_MovementManagement_Dash;
        public InputActionMap Get() { return m_Wrapper.m_MovementManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementManagementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementManagementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementManagementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementManagementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @MoveOnGrapple.started += instance.OnMoveOnGrapple;
            @MoveOnGrapple.performed += instance.OnMoveOnGrapple;
            @MoveOnGrapple.canceled += instance.OnMoveOnGrapple;
            @Grapple.started += instance.OnGrapple;
            @Grapple.performed += instance.OnGrapple;
            @Grapple.canceled += instance.OnGrapple;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IMovementManagementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @MoveOnGrapple.started -= instance.OnMoveOnGrapple;
            @MoveOnGrapple.performed -= instance.OnMoveOnGrapple;
            @MoveOnGrapple.canceled -= instance.OnMoveOnGrapple;
            @Grapple.started -= instance.OnGrapple;
            @Grapple.performed -= instance.OnGrapple;
            @Grapple.canceled -= instance.OnGrapple;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IMovementManagementActions instance)
        {
            if (m_Wrapper.m_MovementManagementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementManagementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementManagementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementManagementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementManagementActions @MovementManagement => new MovementManagementActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Guide;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Guide => m_Wrapper.m_UI_Guide;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Guide.started += instance.OnGuide;
            @Guide.performed += instance.OnGuide;
            @Guide.canceled += instance.OnGuide;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Guide.started -= instance.OnGuide;
            @Guide.performed -= instance.OnGuide;
            @Guide.canceled -= instance.OnGuide;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // AttackManagement
    private readonly InputActionMap m_AttackManagement;
    private List<IAttackManagementActions> m_AttackManagementActionsCallbackInterfaces = new List<IAttackManagementActions>();
    private readonly InputAction m_AttackManagement_NormalSkill;
    private readonly InputAction m_AttackManagement_BlockSkill;
    private readonly InputAction m_AttackManagement_FirstSkill;
    private readonly InputAction m_AttackManagement_SecondSkill;
    private readonly InputAction m_AttackManagement_ThirdSkill;
    private readonly InputAction m_AttackManagement_Unequip;
    private readonly InputAction m_AttackManagement_EquipAxe;
    private readonly InputAction m_AttackManagement_EquipSword;
    public struct AttackManagementActions
    {
        private @PlayerInputActions m_Wrapper;
        public AttackManagementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NormalSkill => m_Wrapper.m_AttackManagement_NormalSkill;
        public InputAction @BlockSkill => m_Wrapper.m_AttackManagement_BlockSkill;
        public InputAction @FirstSkill => m_Wrapper.m_AttackManagement_FirstSkill;
        public InputAction @SecondSkill => m_Wrapper.m_AttackManagement_SecondSkill;
        public InputAction @ThirdSkill => m_Wrapper.m_AttackManagement_ThirdSkill;
        public InputAction @Unequip => m_Wrapper.m_AttackManagement_Unequip;
        public InputAction @EquipAxe => m_Wrapper.m_AttackManagement_EquipAxe;
        public InputAction @EquipSword => m_Wrapper.m_AttackManagement_EquipSword;
        public InputActionMap Get() { return m_Wrapper.m_AttackManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackManagementActions set) { return set.Get(); }
        public void AddCallbacks(IAttackManagementActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackManagementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackManagementActionsCallbackInterfaces.Add(instance);
            @NormalSkill.started += instance.OnNormalSkill;
            @NormalSkill.performed += instance.OnNormalSkill;
            @NormalSkill.canceled += instance.OnNormalSkill;
            @BlockSkill.started += instance.OnBlockSkill;
            @BlockSkill.performed += instance.OnBlockSkill;
            @BlockSkill.canceled += instance.OnBlockSkill;
            @FirstSkill.started += instance.OnFirstSkill;
            @FirstSkill.performed += instance.OnFirstSkill;
            @FirstSkill.canceled += instance.OnFirstSkill;
            @SecondSkill.started += instance.OnSecondSkill;
            @SecondSkill.performed += instance.OnSecondSkill;
            @SecondSkill.canceled += instance.OnSecondSkill;
            @ThirdSkill.started += instance.OnThirdSkill;
            @ThirdSkill.performed += instance.OnThirdSkill;
            @ThirdSkill.canceled += instance.OnThirdSkill;
            @Unequip.started += instance.OnUnequip;
            @Unequip.performed += instance.OnUnequip;
            @Unequip.canceled += instance.OnUnequip;
            @EquipAxe.started += instance.OnEquipAxe;
            @EquipAxe.performed += instance.OnEquipAxe;
            @EquipAxe.canceled += instance.OnEquipAxe;
            @EquipSword.started += instance.OnEquipSword;
            @EquipSword.performed += instance.OnEquipSword;
            @EquipSword.canceled += instance.OnEquipSword;
        }

        private void UnregisterCallbacks(IAttackManagementActions instance)
        {
            @NormalSkill.started -= instance.OnNormalSkill;
            @NormalSkill.performed -= instance.OnNormalSkill;
            @NormalSkill.canceled -= instance.OnNormalSkill;
            @BlockSkill.started -= instance.OnBlockSkill;
            @BlockSkill.performed -= instance.OnBlockSkill;
            @BlockSkill.canceled -= instance.OnBlockSkill;
            @FirstSkill.started -= instance.OnFirstSkill;
            @FirstSkill.performed -= instance.OnFirstSkill;
            @FirstSkill.canceled -= instance.OnFirstSkill;
            @SecondSkill.started -= instance.OnSecondSkill;
            @SecondSkill.performed -= instance.OnSecondSkill;
            @SecondSkill.canceled -= instance.OnSecondSkill;
            @ThirdSkill.started -= instance.OnThirdSkill;
            @ThirdSkill.performed -= instance.OnThirdSkill;
            @ThirdSkill.canceled -= instance.OnThirdSkill;
            @Unequip.started -= instance.OnUnequip;
            @Unequip.performed -= instance.OnUnequip;
            @Unequip.canceled -= instance.OnUnequip;
            @EquipAxe.started -= instance.OnEquipAxe;
            @EquipAxe.performed -= instance.OnEquipAxe;
            @EquipAxe.canceled -= instance.OnEquipAxe;
            @EquipSword.started -= instance.OnEquipSword;
            @EquipSword.performed -= instance.OnEquipSword;
            @EquipSword.canceled -= instance.OnEquipSword;
        }

        public void RemoveCallbacks(IAttackManagementActions instance)
        {
            if (m_Wrapper.m_AttackManagementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackManagementActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackManagementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackManagementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackManagementActions @AttackManagement => new AttackManagementActions(this);
    public interface IMovementManagementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnMoveOnGrapple(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnGuide(InputAction.CallbackContext context);
    }
    public interface IAttackManagementActions
    {
        void OnNormalSkill(InputAction.CallbackContext context);
        void OnBlockSkill(InputAction.CallbackContext context);
        void OnFirstSkill(InputAction.CallbackContext context);
        void OnSecondSkill(InputAction.CallbackContext context);
        void OnThirdSkill(InputAction.CallbackContext context);
        void OnUnequip(InputAction.CallbackContext context);
        void OnEquipAxe(InputAction.CallbackContext context);
        void OnEquipSword(InputAction.CallbackContext context);
    }
}
